package com.luu.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.luu.CrudExerciseApplication;
import com.luu.entity.User;
import com.luu.repository.UserRepository;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = CrudExerciseApplication.class)
@AutoConfigureMockMvc
public class UserControllerIntergrationTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@Autowired
	private UserRepository userRepository;
	
	 @Test
	 public void getAllUsersTest() throws Exception {
		//createUsers();
	    mockMvc.perform(MockMvcRequestBuilders
	    	    .get("/api/user").contentType(MediaType.APPLICATION_JSON))
	            .andDo(print())
	            .andExpect(status().isOk());
	    }
	  
	 @Test
	 public void findUserByIdTest() throws Exception {
		 mockMvc.perform(get("/api/user/7").contentType(MediaType.APPLICATION_JSON))
         .andExpect(status().isOk());
	 }
	 
	 @Test
	 public void updateUserTest() throws Exception {
		 String inJson = "{\"userName\":\"check1moretime\",\"email\":\"check1@gmail.com\",\"address\":\"check address\"}";
	   mockMvc.perform(
			   put("/api/user/8")
			   .content(inJson)
	       .contentType(MediaType.APPLICATION_JSON)
	       .accept(MediaType.APPLICATION_JSON))
	       .andExpect(status().isOk());
	 }
	 
	 @Test
	 public void deleteUserTest() throws Exception {
		 //when(userService.deleteUser(1)).thenReturn(null);
		 mockMvc.perform(
				 delete("/api/user/20")).andExpect(status().isOk());
	 }
	 
	 @Test
	 public void createUserTest() throws Exception {
		
	String inJson = "{\"userName\":\"test\",\"email\":\"test@gmail.com\",\"address\":\"1234u Tho1\"}";
	   mockMvc.perform( MockMvcRequestBuilders
			   .post("/api/user")
			   .content(inJson)
	       .contentType(MediaType.APPLICATION_JSON)
	       .accept(MediaType.APPLICATION_JSON))
	       .andExpect(status().isCreated());
	   }
	 
}
