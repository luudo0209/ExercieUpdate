package com.luu.controller;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.text.ParseException;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.event.annotation.AfterTestClass;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.luu.CrudExerciseApplication;
import com.luu.entity.User;
import com.luu.repository.UserRepository;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = CrudExerciseApplication.class)
@AutoConfigureMockMvc
public class UserControllerIntergrationTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@Autowired
	private UserRepository userRepository;
	
	 @Test
	 public void getAllUsers() throws Exception {
		createUsers();
	    mockMvc.perform(MockMvcRequestBuilders
	    	    .get("/api/user").contentType(MediaType.APPLICATION_JSON))
	            .andDo(print())
	            .andExpect(status().isOk());
	    }
	 
	 public void createUsers() {
		 User user = new User(null,"Luu", "luu@gmail.com", "Phu Tho");
		 User user1 = new User(null, "Luu1", "luu1@gmail.com", "Phu Tho1");
	     userRepository.saveAndFlush(user);
	     userRepository.saveAndFlush(user1);	        
	 }
	 
	 @Test
	 public void createUser() throws Exception 
	 {
	   mockMvc.perform( MockMvcRequestBuilders
	       .post("/api/user")
	       .content(asJsonString(new EmployeeVO(null, "firstName4", "lastName4", "email4@mail.com")))
	       .contentType(MediaType.APPLICATION_JSON)
	       .accept(MediaType.APPLICATION_JSON))
	       .andExpect(status().isCreated())
	       .andExpect(MockMvcResultMatchers.jsonPath("$.employeeId").exists());
	 }
	  

}
