package com.luu.controller;

import static org.hamcrest.CoreMatchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.text.ParseException;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.event.annotation.AfterTestClass;
import org.springframework.test.web.servlet.MockMvc;

import com.luu.CrudExerciseApplication;
import com.luu.entity.User;
import com.luu.repository.UserRepository;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = CrudExerciseApplication.class)
@AutoConfigureMockMvc
public class UserControllerIntergrationTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@Autowired
	private UserRepository userRepository;
	
	@AfterTestClass
	public void resetDB() {
		userRepository.deleteAll();
	}
	
	 @Test
	 public void getUserByEmail() throws Exception {
	    createTestUser("luu@gmail.com");

	    mockMvc.perform(get("/api/userByNameOrEmail/luu@gmail.com").contentType(MediaType.APPLICATION_JSON))
	            .andDo(print())
	            .andExpect(status().isOk())
	            .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
	            .andExpect(jsonPath("$.email", is("sam@gmail.com")));
	    }

	    private void createTestUser(String email) throws ParseException {
	        User user = new User("userName", "email", "address");
	        user.setEmail(email);
	        userRepository.saveAndFlush(user);
	    }

}
